#!/bin/bash -e
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/create-encrypted-cloudwatch-log-group/run.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################



SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "Select a profile to use for KMS operations:"
source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"
KMS_PROFILE="$PROFILE"

echo "Select a profile to create a CloudWatch log group:"
source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"
PROFILE="$PROFILE"

source "$SCRIPT_DIR/../select-kms-key/run.sh"

read -p "Enter CloudWatch log group name: " LOG_GROUP_NAME
read -p "Enter retention days: " RETENTION_DAYS

echo "Select log class:"
echo "1. STANDARD - Higher cost, faster queries, real-time processing"
echo "2. INFREQUENT_ACCESS - Lower cost, slower queries, 12-hour delay for processing"
read -p "Enter choice (1-2): " LOG_CLASS_CHOICE

case $LOG_CLASS_CHOICE in
    1) LOG_CLASS="STANDARD" ;;
    2) LOG_CLASS="INFREQUENT_ACCESS" ;;
    *) LOG_CLASS="STANDARD" ;;
esac

# Check if log group exists
if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" --query "logGroups[?logGroupName=='$LOG_GROUP_NAME']" --output text --profile "$PROFILE" --no-cli-pager --color off | grep -q "$LOG_GROUP_NAME"; then
    echo "Log group '$LOG_GROUP_NAME' already exists. Updating configuration..."
else
    echo "Creating new log group '$LOG_GROUP_NAME'..."
    aws logs create-log-group --log-group-name "$LOG_GROUP_NAME" --kms-key-id "$KMS_KEY_ID" --log-group-class "$LOG_CLASS" --profile "$PROFILE" --no-cli-pager --color off
fi

aws logs put-retention-policy --log-group-name "$LOG_GROUP_NAME" --retention-in-days "$RETENTION_DAYS" --profile "$PROFILE" --no-cli-pager --color off

aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" --query "logGroups[0].arn" --output text --profile "$PROFILE" --no-cli-pager --color off
