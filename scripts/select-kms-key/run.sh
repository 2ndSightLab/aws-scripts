#!/bin/bash -e
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/select-kms-key/run.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################



if [ -z "$KMS_PROFILE" ]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"
    KMS_PROFILE="$PROFILE"
    unset PROFILE
fi

REGION=$(aws configure get region --profile "$KMS_PROFILE")

# Test KMS access first
if ! aws kms list-keys --region "$REGION" --profile "$KMS_PROFILE" --no-cli-pager --color off >/dev/null 2>/dev/null; then
    ERROR_MSG=$(aws kms list-keys --region "$REGION" --profile "$KMS_PROFILE" --no-cli-pager --color off 2>&1)
    echo "ERROR: $ERROR_MSG"
    exit 1
fi

echo "Available KMS keys:"
echo "+------------------------------------------------------------------------------+------------------------------+"
echo "| ARN                                                                          | Alias                        |"
echo "|------------------------------------------------------------------------------|------------------------------|"

ALIASES_DATA=$(aws kms list-aliases --region "$REGION" --profile "$KMS_PROFILE" --query 'Aliases[?starts_with(AliasName, `alias/`) && TargetKeyId != null].[TargetKeyId,AliasName]' --output text --no-cli-pager --color off 2>/dev/null)

HAS_KEYS=false
aws kms list-keys --region "$REGION" --profile "$KMS_PROFILE" --query 'Keys[*].KeyId' --output text --no-cli-pager --color off | tr '\t' '\n' | while read KEY_ID; do
    if [ -n "$KEY_ID" ]; then
        KEY_INFO=$(aws kms describe-key --region "$REGION" --profile "$KMS_PROFILE" --key-id "$KEY_ID" --query "[KeyMetadata.Arn,KeyMetadata.KeyManager]" --output text --no-cli-pager --color off 2>/dev/null)
        if [ $? -eq 0 ]; then
            KEY_MANAGER=$(echo "$KEY_INFO" | cut -f2)
            if [ "$KEY_MANAGER" = "CUSTOMER" ]; then
                HAS_KEYS=true
                ARN=$(echo "$KEY_INFO" | cut -f1)
                ALIAS=$(echo "$ALIASES_DATA" | grep "^$KEY_ID" | cut -f2 | sed "s/^alias\///" | head -1)
                [ -z "$ALIAS" ] && ALIAS="N/A"
                printf "| %-76s | %-28s |\n" "$ARN" "$ALIAS"
            fi
        fi
    fi
done

if [ "$HAS_KEYS" = "false" ]; then
    echo "| No customer-managed KMS keys found in this account/region                    |                              |"
fi

echo "+------------------------------------------------------------------------------+------------------------------+"

while [ -z "$KMS_KEY_ID" ]; do
    echo ""
    echo "Enter KMS key ARN:"
    read KMS_KEY_ID
    if [ -z "$KMS_KEY_ID" ]; then
        echo "ERROR: KMS key ARN cannot be empty."
    fi
done
