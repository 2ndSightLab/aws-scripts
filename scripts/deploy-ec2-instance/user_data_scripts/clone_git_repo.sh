#!/bin/bash -e
################################################################
#
#  Name: Clone_git_repo
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/deploy-ec2-instance/user_data_scripts/clone_git_repo.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


# Check if git is installed, install if not
if ! command -v git &> /dev/null; then
    echo "Git not found, installing..."
    dnf install -y git
fi

CODE_DIR="{{prompt: Enter the directory where you want to clone the git repositories}}"
REPO_URLS="{{prompt: Enter repository URLs separated by spaces}}"
GIT_SECRET="{{prompt: Enter the ARN for the AWS Secrets Manager Secret with credentials stored in gh_username and gh_pat}}"

# Run as ec2-user
sudo -u ec2-user bash << 'EOF'
# Create directory if it doesn't exist
if [ -n "$CODE_DIR" ] && [ ! -d "$CODE_DIR" ]; then
    mkdir -p "$CODE_DIR"
fi

# Change to target directory if specified
if [ -n "$CODE_DIR" ]; then
    cd "$CODE_DIR"
fi

if [ -n "$GIT_SECRET" ]; then
    echo "Using credentials from GIT_SECRET"
    
    # Get secret value from AWS Secrets Manager
    SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "$GIT_SECRET" --query 'SecretString' --output text)
    
    # Parse username and PAT from secret (expecting JSON format)
    GH_USERNAME=$(echo "$SECRET_VALUE" | jq -r '.gh_username')
    GH_PAT=$(echo "$SECRET_VALUE" | jq -r '.gh_pat')
    
    if [ "$GH_USERNAME" = "null" ] || [ "$GH_PAT" = "null" ]; then
        echo "ERROR: Invalid secret format. Expected JSON with gh_username and gh_pat fields."
        exit 1
    fi
    
    # Clone each repository using credentials
    for REPO_URL in $REPO_URLS; do
        echo "Cloning $REPO_URL with authentication..."
        echo -e "$GH_USERNAME\n$GH_PAT" | git clone "$REPO_URL"
    done
    
    # Clear variables
    unset GH_USERNAME GH_PAT SECRET_VALUE
else
    echo "No GIT_SECRET set, cloning without authentication"
    for REPO_URL in $REPO_URLS; do
        echo "Cloning $REPO_URL..."
        git clone "$REPO_URL"
    done
fi
EOF
