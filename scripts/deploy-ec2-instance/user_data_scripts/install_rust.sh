#!/bin/bash -e
################################################################
#
#  Name: Install_rust
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/deploy-ec2-instance/user_data_scripts/install_rust.sh
#  Copyright: © 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


sudo -u ec2-user bash << 'EOF'

sudo yum install glibc-devel -y
sudo yum install gcc glibc-devel -y
sudo yum install openssl-devel -y
sudo yum install bc -y

# Install Rust using rustup (official installer) - non-interactive
export RUSTUP_INIT_SKIP_PATH_CHECK=yes
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable --profile default -y

# Source the cargo environment
source ~/.cargo/env

# Update to latest stable
rustup update stable
rustup default stable

# Add to ec2-user's bashrc
echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc

# Verify installation
rustc --version
cargo --version

EOF

# Add cargo to PATH for all users if it doesn't already exist
if [[ ! -f /etc/profile.d/rust.sh ]] || ! grep -q 'export PATH="$HOME/.cargo/bin:$PATH"' /etc/profile.d/rust.sh; then
    echo 'export PATH="$HOME/.cargo/bin:$PATH"' | sudo tee -a /etc/profile.d/rust.sh
fi

echo $PATH

sudo chmod +x /etc/profile.d/rust.sh

# Add to ec2-user's bashrc as well (in case profile.d doesn't work)
grep -qF 'export PATH="$HOME/.cargo/bin:$PATH"' ~/.bashrc || echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc

# Source bashrc to make Rust available immediately
sudo -u ec2-user bash -c 'source /home/ec2-user/.bashrc'

# Function to check system resources
check_resources() {
    # Get available memory in MB
    local available_mem=$(free -m | awk 'NR==2{print $7}')
    # Get number of CPU cores
    local cpu_cores=$(nproc)
    # Get current load average (1 minute)
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk -F',' '{print $1}' | xargs)
    
    echo "System Resources Check:"
    echo "Available Memory: ${available_mem}MB"
    echo "CPU Cores: ${cpu_cores}"
    echo "Load Average: ${load_avg}"
    
    # Check if we have enough resources for tarpaulin
    # Minimum requirements: 1GB RAM available, load < 2x cores
    local min_mem=1024
    local max_load=$(echo "${cpu_cores} * 2" | bc -l)
    
    if (( available_mem >= min_mem )) && (( $(echo "${load_avg} < ${max_load}" | bc -l) )); then
        echo "✓ Sufficient resources for tarpaulin installation"
        return 0
    else
        echo "✗ Insufficient resources for tarpaulin installation"
        echo "  Need: ${min_mem}MB RAM, Load < ${max_load}"
        return 1
    fi
}

cargo install cargo-audit
cargo install cargo-license

# Check resources before installing tarpaulin
if check_resources; then
    echo "Installing cargo-tarpaulin..."
    cargo install cargo-tarpaulin
else
    echo "Skipping cargo-tarpaulin installation due to insufficient resources"
fi

# Install miri (ARM64 requires nightly, x86_64 can use stable)
if [[ $(uname -m) == "aarch64" ]]; then
    rustup toolchain install nightly
    rustup +nightly component add miri
else
    rustup component add miri
fi
