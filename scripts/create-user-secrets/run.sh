#!/bin/bash -e
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/create-user-secrets/run.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


# Variables
ENVIRONMENT=""
USERNAME=""
USER_ACCOUNT_NUMBER=""
USER_ACCOUNT_NAME=""
ACCESS_KEY_ID=""
SECRET_KEY=""
GITHUB_USER_NAME=""
GITHUB_PAT=""

# Prompt for ENVIRONMENT
while [ -z "$ENVIRONMENT" ]; do
    echo ""
    read -p "Enter environment: " ENVIRONMENT
    if [ -z "$ENVIRONMENT" ]; then
        echo "ERROR: Environment cannot be empty. Please enter a valid environment."
    fi
done

# Prompt for USERNAME
while [ -z "$USERNAME" ]; do
    echo ""
    read -p "Enter username: " USERNAME
    if [ -z "$USERNAME" ]; then
        echo "ERROR: Username cannot be empty. Please enter a valid username."
    fi
done

# Prompt for USER_ACCOUNT_NUMBER
while [ -z "$USER_ACCOUNT_NUMBER" ]; do
    echo ""
    read -p "Enter AWS account number: " USER_ACCOUNT_NUMBER
    if [ -z "$USER_ACCOUNT_NUMBER" ]; then
        echo "ERROR: AWS account number cannot be empty. Please enter a valid account number."
    elif ! [[ "$USER_ACCOUNT_NUMBER" =~ ^[0-9]{12}$ ]]; then
        echo "ERROR: AWS account number must be exactly 12 digits."
        USER_ACCOUNT_NUMBER=""
    fi
done

# Prompt for USER_ACCOUNT_NAME
while [ -z "$USER_ACCOUNT_NAME" ]; do
    echo ""
    read -p "Enter AWS account name: " USER_ACCOUNT_NAME
    if [ -z "$USER_ACCOUNT_NAME" ]; then
        echo "ERROR: AWS account name cannot be empty. Please enter a valid account name."
    fi
done

# Prompt for ACCESS_KEY_ID
while [ -z "$ACCESS_KEY_ID" ]; do
    echo ""
    read -p "Enter AWS access key ID: " ACCESS_KEY_ID
    if [ -z "$ACCESS_KEY_ID" ]; then
        echo "ERROR: AWS access key ID cannot be empty. Please enter a valid access key ID."
    elif ! [[ "$ACCESS_KEY_ID" =~ ^AKIA[0-9A-Z]{16}$ ]]; then
        echo "ERROR: AWS access key ID must start with AKIA and be 20 characters total."
        ACCESS_KEY_ID=""
    fi
done

# Prompt for SECRET_KEY
while [ -z "$SECRET_KEY" ]; do
    echo ""
    read -p "Enter AWS secret access key: " SECRET_KEY
    if [ -z "$SECRET_KEY" ]; then
        echo "ERROR: AWS secret access key cannot be empty. Please enter a valid secret access key."
    elif [ ${#SECRET_KEY} -ne 40 ]; then
        echo "ERROR: AWS secret access key must be exactly 40 characters."
        SECRET_KEY=""
    fi
done

# Formulate AWS CLI secret name
AWS_SECRET_NAME=$(echo "${ENVIRONMENT}-${USERNAME}-awscli" | tr '[:upper:]' '[:lower:]')

# Prompt for KMS key ARN
while [ -z "$KMS_KEY_ARN" ]; do
    echo ""
    read -p "Enter KMS key ARN for encryption: " KMS_KEY_ARN
    if [ -z "$KMS_KEY_ARN" ]; then
        echo "ERROR: KMS key ARN cannot be empty. Please enter a valid KMS key ARN."
    elif ! [[ "$KMS_KEY_ARN" =~ ^arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[a-f0-9-]{36}$ ]]; then
        echo "ERROR: Invalid KMS key ARN format."
        KMS_KEY_ARN=""
    fi
done

# Create AWS CLI secret
AWS_SECRET_VALUE="{\"aws_access_key_id\":\"$ACCESS_KEY_ID\",\"aws_secret_key\":\"$SECRET_KEY\",\"user_account_id\":\"$USER_ACCOUNT_NUMBER\",\"mfa_serial\":\"arn:aws:iam::$USER_ACCOUNT_NUMBER:mfa/$USERNAME\"}"

aws secretsmanager create-secret \
    --name "$AWS_SECRET_NAME" \
    --description "AWS CLI credentials for $USERNAME in $ENVIRONMENT" \
    --secret-string "$AWS_SECRET_VALUE" \
    --kms-key-id "$KMS_KEY_ARN" \
    --color off

echo "Created AWS CLI secret: $AWS_SECRET_NAME"

# Formulate GitHub secret name
GITHUB_SECRET_NAME="${USERNAME}-github"

# Prompt for GITHUB_USER_NAME
while [ -z "$GITHUB_USER_NAME" ]; do
    echo ""
    read -p "Enter GitHub username: " GITHUB_USER_NAME
    if [ -z "$GITHUB_USER_NAME" ]; then
        echo "ERROR: GitHub username cannot be empty. Please enter a valid GitHub username."
    elif ! [[ "$GITHUB_USER_NAME" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,37}[a-zA-Z0-9])?$ ]]; then
        echo "ERROR: Invalid GitHub username format. Must be 1-39 characters, alphanumeric or hyphens, cannot start/end with hyphen."
        GITHUB_USER_NAME=""
    fi
done

# Prompt for GITHUB_PAT
while [ -z "$GITHUB_PAT" ]; do
    echo ""
    read -p "Enter GitHub personal access token: " GITHUB_PAT
    if [ -z "$GITHUB_PAT" ]; then
        echo "ERROR: GitHub personal access token cannot be empty. Please enter a valid token."
    elif ! [[ "$GITHUB_PAT" =~ ^(ghp_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9_]{82})$ ]]; then
        echo "ERROR: Invalid GitHub PAT format. Must be classic token (ghp_) or fine-grained token (github_pat_)."
        GITHUB_PAT=""
    fi
done

# Create GitHub secret
GITHUB_SECRET_VALUE="{\"gh_username\":\"$GITHUB_USER_NAME\",\"gh_pat\":\"$GITHUB_PAT\"}"

aws secretsmanager create-secret \
    --name "$GITHUB_SECRET_NAME" \
    --description "GitHub credentials for $USERNAME" \
    --secret-string "$GITHUB_SECRET_VALUE" \
    --kms-key-id "$KMS_KEY_ARN" \
    --color off

echo "Created GitHub secret: $GITHUB_SECRET_NAME"
echo ""
echo "Script complete."
