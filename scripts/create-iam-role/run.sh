#!/bin/bash
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/create-iam-role/run.sh
#  Copyright: © 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################



SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../functions/create_iam_role_trust_policy.sh"

echo "Select a profile to use for IAM operations:"
source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"
if [ $? -ne 0 ] || [ -z "$PROFILE" ]; then
    echo "Failed to select AWS profile. Exiting."
    exit 1
fi


# Function to validate IP address
validate_ip() {
    local IP_ADDRESS=$1
    if [[ $IP_ADDRESS =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})(/[0-9]{1,2})?$ ]]; then
        local IFS='.'
        local -a octets=($IP_ADDRESS)
        for octet in "${octets[@]:0:4}"; do
            if [ "$octet" -gt 255 ]; then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}



# Function to prompt for yes/no input
prompt_yes_no() {
    local PROMPT_TEXT="$1"
    while true; do
        read -p "$PROMPT_TEXT [y/n]: " CHOICE
        case $CHOICE in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer y or n.";;
        esac
    done
}

# Prompt for role name
while true; do
    read -p "Enter IAM role name: " ROLE_NAME
    if [[ -n "$ROLE_NAME" ]]; then
        break
    fi
    echo "Role name cannot be empty. Please try again."
done

# Check if role exists
echo "Executing: aws iam get-role --role-name \"$ROLE_NAME\" --profile \"$PROFILE\" --no-cli-pager --color off"
ROLE_EXISTS=$(aws iam get-role --role-name "$ROLE_NAME" --profile "$PROFILE" --no-cli-pager --color off 2>/dev/null || echo "")
if [ -n "$ROLE_EXISTS" ]; then
    echo "Role '$ROLE_NAME' already exists."
    if prompt_yes_no "Do you want to update it?"; then
        UPDATE_ROLE=true
    else
        echo "Exiting without changes."
        exit 0
    fi
else
    UPDATE_ROLE=false
fi

# Prompt for role usage type
echo "Who will use this role?"
echo "1) EC2 instances"
echo "2) Users"
echo "3) Other roles"
while true; do
    read -p "Select option (1-3): " ROLE_TYPE
    case $ROLE_TYPE in
        1) PRINCIPAL_TYPE="service"; break;;
        2) PRINCIPAL_TYPE="user"; break;;
        3) PRINCIPAL_TYPE="role"; break;;
        *) echo "Please select 1, 2, or 3.";;
    esac
done

# Prompt for principal ARN/service
if [ "$PRINCIPAL_TYPE" == "service" ]; then
    PRINCIPAL_VALUE="ec2"
else
    if [ "$PRINCIPAL_TYPE" == "user" ]; then
        read -p "Enter user ARN (e.g., arn:aws:iam::123456789012:user/username): " PRINCIPAL_VALUE
    else
        read -p "Enter role ARN (e.g., arn:aws:iam::123456789012:role/rolename): " PRINCIPAL_VALUE
    fi
fi

# Prompt for IP address
while true; do
    read -p "Enter allowed IP address (CIDR format, e.g., x.x.x.x/x): " ALLOWED_IP
    if validate_ip "$ALLOWED_IP"; then
        break
    fi
    echo "Invalid IP address format. Please use CIDR notation (e.g., x.x.x.x/x)."
done

# Create trust policy based on principal type
TRUST_POLICY=$(create_iam_role_trust_policy "$PRINCIPAL_TYPE" "$PRINCIPAL_VALUE" "$ALLOWED_IP")
if [ $? -ne 0 ] || [ -z "$TRUST_POLICY" ]; then
    echo "Failed to create trust policy"
    exit 1
fi

# Create or update IAM role
if [ "$UPDATE_ROLE" = true ]; then
    # Update existing role's assume role policy
    echo "Executing: aws iam update-assume-role-policy --role-name \"$ROLE_NAME\" --policy-document (heredoc) --profile \"$PROFILE\" --no-cli-pager --color off"
    aws iam update-assume-role-policy --role-name "$ROLE_NAME" --profile "$PROFILE" --no-cli-pager --color off --policy-document "$TRUST_POLICY"
    if [ $? -eq 0 ]; then
        echo "Updated trust policy for role $ROLE_NAME"
    else
        echo "Failed to update trust policy for role $ROLE_NAME"
        exit 1
    fi
else
    # Create new IAM role
    echo "Executing: aws iam create-role --role-name \"$ROLE_NAME\" --assume-role-policy-document (heredoc) --profile \"$PROFILE\" --no-cli-pager --color off"
    aws iam create-role --role-name "$ROLE_NAME" --profile "$PROFILE" --no-cli-pager --color off --assume-role-policy-document "$TRUST_POLICY"
    if [ $? -eq 0 ]; then
        echo "Created new role $ROLE_NAME"
    else
        echo "Failed to create role $ROLE_NAME"
        exit 1
    fi
    
    # Create instance profile only for service roles
    if [ "$PRINCIPAL_TYPE" == "service" ]; then
        echo "Executing: aws iam create-instance-profile --instance-profile-name \"$ROLE_NAME\" --profile \"$PROFILE\" --no-cli-pager --color off"
        if aws iam create-instance-profile --instance-profile-name "$ROLE_NAME" --profile "$PROFILE" --no-cli-pager --color off; then
            echo "Created instance profile $ROLE_NAME"
        else
            echo "Warning: Failed to create instance profile $ROLE_NAME"
        fi

        # Add role to instance profile
        echo "Executing: aws iam add-role-to-instance-profile --instance-profile-name \"$ROLE_NAME\" --role-name \"$ROLE_NAME\" --profile \"$PROFILE\" --no-cli-pager --color off"
        if aws iam add-role-to-instance-profile --instance-profile-name "$ROLE_NAME" --role-name "$ROLE_NAME" --profile "$PROFILE" --no-cli-pager --color off; then
            echo "Added role to instance profile"
        else
            echo "Warning: Failed to add role to instance profile"
        fi
    fi
fi

if [ "$UPDATE_ROLE" = true ]; then
    echo "IAM role $ROLE_NAME updated successfully using profile $PROFILE"
else
    echo "IAM role $ROLE_NAME created successfully using profile $PROFILE"
fi

echo ""
echo "╔══════════════════════════════════════════════════════════════════════════════════╗"
echo "║                                    WARNING                                       ║"
echo "║                                                                                  ║"
echo "║  After changing the trust policy, you must view it in a SEPARATE browser         ║"
echo "║  window. When you refresh the current tab, the AWS console does NOT show         ║"
echo "║  the updated trust policy.                                                       ║"
echo "║                                                                                  ║"
echo "║  To verify changes: Open a new browser window/tab and navigate to the role.      ║"
echo "║  Click on the Trust relationships tab to view the trust policy.                  ║"
echo "╚══════════════════════════════════════════════════════════════════════════════════╝"
echo ""

# Ask if user wants to add a policy to the role
if prompt_yes_no "Do you want to add a policy to this role?"; then
    while true; do
        read -p "Enter the policy ARN or 'new' for a new policy: " POLICY_INPUT
        if [[ "$POLICY_INPUT" == "new" ]]; then
            source "$SCRIPT_DIR/../create-iam-policy/run.sh"
            break
        elif [[ $POLICY_INPUT =~ ^arn:aws:iam::[0-9]{12}:policy/.+ ]]; then
            echo "Executing: aws iam attach-role-policy --role-name \"$ROLE_NAME\" --policy-arn \"$POLICY_INPUT\" --profile \"$PROFILE\" --no-cli-pager --color off"
            if aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn "$POLICY_INPUT" --profile "$PROFILE" --no-cli-pager --color off; then
                echo "Policy $POLICY_INPUT attached to role $ROLE_NAME successfully"
            else
                echo "Failed to attach policy $POLICY_INPUT to role $ROLE_NAME"
            fi
            break
        else
            echo "Invalid input. Please enter a valid IAM policy ARN or 'new'"
        fi
    done
fi


