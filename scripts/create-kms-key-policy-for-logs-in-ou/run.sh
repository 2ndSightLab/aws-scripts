#!/bin/bash -e
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/create-kms-key-policy-for-logs-in-ou/run.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################



SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "Select a profile to use for Organizations operations:"
source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"
ORG_PROFILE=$PROFILE

echo "Select a profile to use for KMS operations:"
source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"
KMS_PROFILE=$PROFILE

# Get organization root ID automatically
echo "Looking up organization root ID..."
ORG_ROOT_ID=$(aws organizations list-roots --profile "$ORG_PROFILE" --no-cli-pager --color off --query 'Roots[0].Id' --output text)
echo "Found organization root ID: $ORG_ROOT_ID"

# Get role/user ARNs for read permissions (decrypt)
READ_ARNS=()
echo "Enter role/user ARNs allowed to read/decrypt the logs (press Enter with empty input to finish):"
while true; do
    read -p "Enter ARN (or press Enter to finish): " READ_ARN
    if [[ -z "$READ_ARN" ]]; then
        if [[ ${#READ_ARNS[@]} -eq 0 ]]; then
            echo "At least one ARN is required"
            continue
        else
            break
        fi
    elif [[ $READ_ARN =~ ^arn:aws:iam::[0-9]{12}:(role|user)/.+ ]]; then
        READ_ARNS+=("$READ_ARN")
        echo "Added: $READ_ARN"
    else
        echo "Invalid ARN format. Please enter a valid IAM role or user ARN"
    fi
done

# List available OUs
echo "Available Organizational Units:"
aws organizations list-organizational-units-for-parent --profile "$ORG_PROFILE" --no-cli-pager --color off --parent-id "$ORG_ROOT_ID" --query 'OrganizationalUnits[].[Id,Name]' --output table

# Get OU ID for write permissions (encrypt)
while true; do
    read -p "Enter the Organizational Unit (OU) ID allowed to write logs (e.g., ou-xxxxxxxxxx): " OU_ID
    if [[ $OU_ID =~ ^ou-[a-z0-9-]+$ ]]; then
        break
    else
        echo "Invalid OU ID format. Please enter a valid OU ID (e.g., ou-xxxxxxxxxx)"
    fi
done

# Get IP addresses for key admin access
while true; do
    read -p "Enter the IP address/CIDR for MFA access (e.g., x.x.x.x or x.x.x.x/x): " MFA_IP_CIDR
    if [[ -n "$MFA_IP_CIDR" ]]; then
        break
    else
        echo "IP address/CIDR cannot be empty"
    fi
done

while true; do
    read -p "Enter the specific IP address for EC2 role access (e.g., x.x.x.x or x.x.x.x/x): " EC2_IP_ADDRESS
    if [[ -n "$EC2_IP_ADDRESS" ]]; then
        break
    else
        echo "IP address cannot be empty"
    fi
done

while true; do
    read -p "Enter the EC2 role ARN for key admin access: " EC2_ROLE_ARN
    if [[ $EC2_ROLE_ARN =~ ^arn:aws:iam::[0-9]{12}:role/.+ ]]; then
        break
    else
        echo "Invalid role ARN format. Please enter a valid IAM role ARN"
    fi
done

# Select existing KMS key
echo "Select a KMS key to update with the policy:"
source "$SCRIPT_DIR/../select-kms-key/run.sh"

echo "Configuration:"
echo "Organization Root ID: $ORG_ROOT_ID"
echo "Read/Decrypt ARNs: ${READ_ARNS[*]}"
echo "Write/Encrypt OU ID: $OU_ID"
echo "MFA IP CIDR: $MFA_IP_CIDR"
echo "EC2 IP Address: $EC2_IP_ADDRESS"
echo "EC2 Role ARN: $EC2_ROLE_ARN"
echo "Selected KMS Key ID: $KMS_KEY_ID"

# Create KMS key policy
POLICY_JSON=$(cat <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "EnableIAMUserPermissions",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::$(aws sts get-caller-identity --profile "$KMS_PROFILE" --no-cli-pager --color off --query Account --output text):root"
      },
      "Action": "kms:*",
      "Resource": "*"
    },
    {
      "Sid": "AllowCloudWatchLogsService",
      "Effect": "Allow",
      "Principal": {
        "Service": "logs.amazonaws.com"
      },
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*",
        "kms:DescribeKey"
      ],
      "Resource": "*"
    },
    {
      "Sid": "AllowOUPrincipalsEncryption",
      "Effect": "Allow",
      "Principal": "*",
      "Action": [
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey"
      ],
      "Resource": "*",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "aws:PrincipalOrgPaths": [
            "o-*/r-$ORG_ROOT_ID/ou-$OU_ID/"
          ]
        }
      }
    },
    {
      "Sid": "AllowLogReaderDecryption",
      "Effect": "Allow",
      "Principal": {
        "AWS": [$(printf '"%s",' "${READ_ARNS[@]}" | sed 's/,$//')]
      },
      "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
      ],
      "Resource": "*"
    }
  ]
}
EOF
)

echo "Updating KMS key policy..."
aws kms put-key-policy --profile "$KMS_PROFILE" --no-cli-pager --color off --key-id "$KMS_KEY_ID" --policy-name default --policy "$POLICY_JSON"

