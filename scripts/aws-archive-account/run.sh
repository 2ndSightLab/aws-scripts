#!/bin/bash -e
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/aws-archive-account/run.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


#these variables contain the AWS CLI profiles used in the to and from AWS account
ARCHIVE_TO=""
ARCHIVE_FROM=""
clear
echo ""
echo "About this script"
echo "***************************"
echo ""
echo "Blog posts:"
echo ""
echo "https://medium.com/cloud-security/archiving-an-aws-account-e3b47bf1bdd3"
echo ""
echo "This script presumes you are running it with:"
echo "* A user in the archive account (to_account) that has:"
echo "* Permission to assume an archive role in the to_account"
echo "* Permission to assume an archive role in the from_account"
echo "* The roles in both accounts have required permissions."
echo ""

while true; do
    read -p "Have you created the user, roles and policies? Ctrl-C to exit. Enter to continue." OK
    break
done
echo ""
echo "You can do the following with this script:"
echo ""
echo "1 Archive: archive or copy resources from one AWS account to another"
echo "2 Launch an instance from an AMI to test it with a given profile before you deregister the source AMI"
echo "3 Apply a lifecycle rule to a bucket"
echo ""

while true; do
    read -p "Enter the number for the action you want to run: " ACTION
    if [[ "$ACTION" =~ ^[1-3]$ ]]; then
        echo "Action: $ACTION"
        break
    else
        echo "Action $ACTION is invalid. Please enter 1, 2, or 3."
    fi
done
if [ "$ACTION" == "2" ]; then
source scripts/test-ami.sh
exit 0
fi 

if [ "$ACTION" == "3" ]; then 
source scripts/s3-lifecycle.sh
exit 0
fi

echo ""
echo "Configure to_account and from_account CLI profiles"
echo "***************************"
echo "Enter the name of or configure AWS CLI profiles for the from account and to account."
echo ""
echo "Profiles on this system"
echo "***************************"
aws configure list-profiles
echo ""
echo "Are the from and to account profiles in the list? If not, ctrl-c to exit."
echo "You can use these scripts to configure your profiles:"
echo "scripts/aws-cli-source-profile/run.sh"
echo "scripts/aws-cli-role-profile/run.sh"
echo ""

while true; do
    read -p "Enter the profile for the from account: " ARCHIVE_FROM
    if [ -n "$ARCHIVE_FROM" ] && [[ "$ARCHIVE_FROM" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        echo "Validate credentials for $ARCHIVE_FROM:"
        if aws sts get-caller-identity --profile "$ARCHIVE_FROM" --color off; then
            break
        else
            echo "Invalid profile or credentials. Please try again."
        fi
    else
        echo "Invalid profile name format. Use only letters, numbers, underscores, periods, and hyphens."
    fi
done
echo ""

while true; do
    read -p "Enter the profile from the to account: " ARCHIVE_TO
    if [ -n "$ARCHIVE_TO" ] && [[ "$ARCHIVE_TO" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        echo "Validate credentials for $ARCHIVE_TO:"
        if aws sts get-caller-identity --profile "$ARCHIVE_TO" --color off; then
            break
        else
            echo "Invalid profile or credentials. Please try again."
        fi
    else
        echo "Invalid profile name format. Use only letters, numbers, underscores, periods, and hyphens."
    fi
done
echo ""

while true; do
    read -p "Enter the profile used to list the KMS keys used to encrypt new resources: " KMS_PROFILE
    if [ -n "$KMS_PROFILE" ] && [[ "$KMS_PROFILE" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        echo "Validate credentials for $KMS_PROFILE:"
        if aws sts get-caller-identity --profile "$KMS_PROFILE" --color off; then
            break
        else
            echo "Invalid profile or credentials. Please try again."
        fi
    else
        echo "Invalid profile name format. Use only letters, numbers, underscores, periods, and hyphens."
    fi
done
echo ""

while true; do
    read -p "Enter region: " REGION
    if [ -n "$REGION" ] && [[ "$REGION" =~ ^[a-z0-9-]+$ ]]; then
        break
    else
        echo "Invalid region format. Please enter a valid AWS region (e.g., us-east-1)."
    fi
done

source scripts/s3-buckets.sh
source scripts/amis.sh
source scripts/secrets.sh
source scripts/parameters.sh

echo "*************************"
echo "Resources to manually review"
echo "*************************"
source scripts/eips.sh
source scripts/dns.sh
source scripts/iam-users.sh
source scripts/iam-roles.sh
source scripts/iam-policies.sh
echo ""
echo "Archive complete."
