#!/bin/bash -e
################################################################
#
#  Name: Create_local_ami
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/aws-archive-account/functions/create_local_ami.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


create_local_ami() {
  local ami_id="$1"
  local key_pair_name="$2"
  local security_group_id="$3"
  local subnet_id="$4"
  local kms_key="$5"
  local archive_to="$6" 
  local region="$7"
  local instance_size="$8"

   block_device_mappings='[{"DeviceName": "/dev/xvda","Ebs": {"Encrypted": true, "KmsKeyId": "'$kms_key'"}}]'
   echo "block_device_mappings: $block_device_mappings"

   echo "Share ami: $ami_id"
   echo "key pair: $key_pair_name"
   echo "security group: $security_group_id"
   echo "subnet: $subnet_id"
   echo "ksm_key: $kms_key"
   echo "region: $region"

   if [[ -z "$instance_size" ]]; then 

     read -p "Do you want to see valid instances types for this ami? (y): " show
     if [ "$show" == "y" ]; then 
       aws ec2 describe-instance-types \
       --filters "Name=processor-info.supported-architecture,\
       Values=$(aws ec2 describe-images --image-ids "$ami_id" \
       --query 'Images[0].Architecture' --output text \
       --profile "$archive_to" --color off)" --query 'InstanceTypes[*].InstanceType' \
       --output json --region $region --profile "$archive_to" --color off | jq -r '.[]'

       echo ""
     fi
  
     read -p "Enter desired image size (e.g., t2.micro, t2.medium): " instance_size

   fi

   echo "Launch instance from AMI: $ami_id"

   instance_id=$(launch_instance "$ami_id" "$key_pair_name" "$security_group_id" "$subnet_id" "$kms_key" "$archive_to" "$region" "$instance_size")

   if [[ "$instance_id" != i-* ]]; then
     echo "Error launching instance: $instance_id"
     exit 1
   else
     echo "Launched instance: $instance_id"
   fi

   instance_id=$(check_status "$instance_id" "$archive_to" "$region")

   if [[ "$instance_id" != i-* ]]; then
     echo "Error launching instance: $instance_id"
     exit 1
   else
     echo "Launched instance: $instance_id"
     echo "Stop the instance"
     aws ec2 stop-instances --instance-ids $instance_id --profile $archive_to --region $region --color off
     read -p "Enter new image name: " iname
     read -p "Enter description: " idesc

     echo "Waiting for instance to stop"
     aws ec2 wait instance-stopped --instance-ids $instance_id --profile $archive_to --region $region --color off

     NEW_AMI=$(aws ec2 create-image \
     --instance-id $instance_id \
     --name "$iname" \
     --description "$idesc" \
     --query 'ImageId' \
     --profile "$archive_to" \
     --region "$region" \
     --color off \
     --output text)

     echo "Image created: $NEW_AMI"

cat <<'END_TEXT'

        I tried to add some code here to wait for the ami
        to become available and then test it, 
        however it takes so long for the AMI to become 
        available that the script always times out or 
        is difficult to test. To simplify things I 
        created a separate script for testing AMIs. 
        Wait until the AMI status changes to  
        Available and then run the script scripts/test-ami.sh.
        Maybe I'll play around with this more later or 
        AWS will make AMI creation faster.

END_TEXT

     test='n'
     #read -p "Do you want to test the image? (y):" test
     if [ "$test" == "y" ]; then

        echo "Waiting for AMI to become available..."
        NEW_AMI=$(wait_for_ami $NEW_AMI)

        if [[ "$NEW_AMI" != ami-* ]]; then
          echo "Error checking status of ami: $NEW_AMI"
          exit 1
        else
          echo "Status available for ami: $NEW_AMI" 
        fi
 
        new_ami_instance_id=$(launch_instance "$NEW_AMI" "$key_pair_name" "$security_group_id" "$subnet_id" "$kms_key" "$archive_to" "$region" "$instance_size")

        if [[ "$new_ami_instance_id" != i-* ]]; then
          echo "Error launching test instance: $new_ami_instance_id"
          exit 1
        else
          echo "Launched instance: $new_ami_instance_id"
        fi

        echo "Checking status of test instance: $new_ami_instance_id"
        new_ami_instance_id=$(check_status "$new_ami_instance_id" "$archive_to" "$region")

        if [[ "$new_ami_instance_id" != i-* ]]; then
          echo "Error checking status of instance: $new_ami_instance_id"
          exit 1
        else
          echo "Status OK for  instance: $new_ami_instance_id" 
        fi
        echo "Enter stop to stop the new instance"
        echo "Enter terminate to terminate the new instance"
        echo "Enter to leave the instance running"
        read -p "Enter status: " status

        if [ "$status" == "stop" ]; then
          aws ec2 stop-instances --instance-ids $new_ami_instance_id \
            --profile $archive_from --region $region --color off
        fi

        if [ "$status" == "terminate" ]; then 
          aws ec2 terminate-instances --instance-ids $new_ami_instance_id \
          --profile $archive_from --region $region --color off
        fi

        echo "Terminating the instance using transferred AMI: $ami_id"
        aws ec2 terminate-instances --instance-ids $instance_id \
         --profile $archive_from --region $region --color off
    
      fi
   fi
}
