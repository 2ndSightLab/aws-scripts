#!/bin/bash -e
################################################################
#
#  Name: Amis
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/aws-archive-account/scripts/amis.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


# Source functions
source functions/create_local_ami.sh
source functions/wait_for_ami.sh
source functions/check_status.sh
source functions/launch_instance.sh
source functions/share_ami.sh

cat <<'END_TEXT'

***************************
EC2 AMIs (Amazon Machine Images)
***************************

END_TEXT


read -p "Do you want to copy any AMIs? (y): " COPY
if [ "$COPY" == "y" ]; then

read -p "Do you want to see a list of images in the from account? (y): " VIEW
if [ "$VIEW" == "y" ]; then

cat <<'END_TEXT'
Below is a list of Amazon Machine Images in this account which can be used to 
start new EC2 instances. Note that if the AMI is encrypted, the user trying
to start a new image from the AMI will need permission to use the associated
KMS key.

END_TEXT

  aws ec2 describe-images \
  --owners self \
  --profile $ARCHIVE_FROM \
  --region $REGION \
  --color off \
  --query 'Images[*].{Name: Name, ImageId: ImageId, Snapshots: BlockDeviceMappings[?Ebs.Encrypted==`true`].Ebs.SnapshotId}' \
  --output json \
 | jq -r '.[] | "\(.Name),\(.ImageId),\(.Snapshots[] // "N/A")" ' \
 | while IFS=, read -r AMI_NAME AMI_ID SNAPSHOT_ID; do
    if [[ "${SNAPSHOT_ID}" == "N/A" ]]; then
        echo "AMI Name: ${AMI_NAME}, AMI ID: ${AMI_ID}, KMS Key ID: No encryption/KMS key used"
    else
        KMS_KEY_ID=$(aws ec2 describe-snapshots \
          --snapshot-ids "${SNAPSHOT_ID}" \
          --profile $ARCHIVE_FROM \
          --region $REGION \
          --color off \
          --query "Snapshots[*].KmsKeyId" \
          --output text 2>/dev/null)
        if [[ -z "${KMS_KEY_ID}" ]]; then
            KMS_KEY_ID="Default/AWS managed key"
        fi
        echo "AMI Name: ${AMI_NAME}, AMI ID: ${AMI_ID}, KMS Key ID: ${KMS_KEY_ID}"
    fi
  done

  echo ""
fi

echo "Done displaying image names."

AMI_ID="all"

while [[ -n "$AMI_ID" ]]; do

   read -p "Enter the AMI ID (not name) you want to archive or all. Enter to continue: " AMI_ID

   echo "Enter the values for the EC2 instance used to transfer the AMI ownership to the new account:"

   echo ""
   echo "EC2 SSH keys in the to account:"
   echo ""
   aws ec2 describe-key-pairs  --query 'KeyPairs[*].KeyName' \
     --profile $ARCHIVE_TO --region $REGION --color off --output text
   echo ""
   read -p "Enter the name of your SSH key pair or list to see a list of key pairs: " KEY_PAIR
   echo ""
   echo "Security groups in the to account:"
   echo ""
   aws ec2 describe-security-groups --query "SecurityGroups[*].[GroupId,GroupName]" --output text \
      --region $REGION --profile $ARCHIVE_TO --color off
   echo ""
   read -p "Enter the Security Group ID (e.g., sg-xxxxxxxxxxxxxxxxx): " SG_ID
   echo ""
   echo "Subnets in the to account:"
   aws ec2 describe-subnets --profile $ARCHIVE_TO --region $REGION \
      --color off --query "Subnets[*].{ID:SubnetId,Name:Tags[?Key=='Name']|[0].Value}" --output text
   echo ""
   read -p "Enter the Subnet ID (e.g., subnet-xxxxxxxxxxxxxxxxx): " SUBNET_ID
   echo ""
   echo "Key ARNs and Aliases (one command for all this data: #awswishlist):"
   echo ""

   aws kms list-aliases --profile $KMS_PROFILE --region $REGION --color off \
    | jq -r --arg region "$REGION" \
    --arg accountid "$(aws sts get-caller-identity --profile $KMS_PROFILE --query Account --output text --color off)" \
    '.Aliases[] | select(.TargetKeyId) | "arn:aws:kms:" + $region + ":" + $accountid + ":key/" + .TargetKeyId + " " + .AliasName'

   echo ""  
   read -p "Enter the KMS Key ARN for EBS encryption in the destination account: " KMS_KEY

   TO_ACCOUNT=$(aws sts get-caller-identity --query Account --output text --profile $ARCHIVE_TO --color off)

   if [[ -n $AMI_ID ]]; then
     if [ "$AMI_ID" == "all" ]; then

       #loop through all AMIs and share them
       aws ec2 describe-images --region "$REGION" --owners 'self' \
          --profile $ARCHIVE_FROM --color off \
          --query 'Images[].ImageId' --output json | jq -r '.[]' | while read AMI_ID; do
          share_ami "$AMI_ID" "$TO_ACCOUNT" "$ARCHIVE_FROM" "$REGION"
       done
   
       #create local ami
       aws ec2 describe-images --region "$REGION" --owners 'self' \
          --profile $ARCHIVE_FROM --color off \
          --query 'Images[].ImageId' --output json | jq -r '.[]' | while read AMI_ID; do
       create_local_ami "$AMI_ID" "$KEY_PAIR" "$SG_ID" "$SUBNET_ID" "$KMS_KEY" "$ARCHIVE_TO" "$REGION"
     done

     else
    
       share_ami "$AMI_ID" "$TO_ACCOUNT" "$ARCHIVE_FROM" "$REGION"
       create_local_ami "$AMI_ID" "$KEY_PAIR" "$SG_ID" "$SUBNET_ID" "$KMS_KEY" "$ARCHIVE_TO" "$REGION"
     fi
   fi
done      

echo "Remember to test the AMIs! You can do that with the script scripts/test-ami.sh"
echo "After you verify the AMIs are good to go you can remove them deregister them in the from account."
echo ""
read -p "Enter to continue." OK


#end if copy....
fi

