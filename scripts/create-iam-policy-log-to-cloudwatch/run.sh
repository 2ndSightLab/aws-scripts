#!/bin/bash -e
################################################################
#
#  Name: Run
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/create-iam-policy-log-to-cloudwatch/run.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  AWS automation script
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################



SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "Select a profile to use for IAM operations:"
source "$SCRIPT_DIR/../select-aws-cli-profile/run.sh"

# Function to validate IP address
validate_ip() {
    local IP=$1
    if [[ $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(/[0-9]{1,2})?$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to validate KMS ARN
validate_kms_arn() {
    local ARN=$1
    if [[ $ARN =~ ^arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[a-f0-9-]{36}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to validate AWS account ID
validate_account_id() {
    local ACCOUNT=$1
    if [[ $ACCOUNT =~ ^[0-9]{12}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Prompt for role name
while true; do
    read -p "Enter IAM role name: " ROLE_NAME
    if [[ -n "$ROLE_NAME" ]]; then
        break
    fi
    echo "Role name cannot be empty. Please try again."
done

# Prompt for log group name
while true; do
    read -p "Enter CloudWatch log group name: " LOG_GROUP_NAME
    if [[ -n "$LOG_GROUP_NAME" ]]; then
        break
    fi
    echo "Log group name cannot be empty. Please try again."
done

# Prompt for IP address
while true; do
    read -p "Enter allowed IP address (CIDR format, e.g., x.x.x.x/x): " ALLOWED_IP
    if validate_ip "$ALLOWED_IP"; then
        break
    fi
    echo "Invalid IP address format. Please use CIDR notation (e.g., x.x.x.x/x)."
done

# Prompt for KMS key ARN
while true; do
    read -p "Enter KMS key ARN: " KMS_KEY_ARN
    if validate_kms_arn "$KMS_KEY_ARN"; then
        break
    fi
    echo "Invalid KMS ARN format. Please use format: arn:aws:kms:region:account:key/key-id"
done

# Prompt for AWS region
while true; do
    read -p "Enter AWS region (e.g., us-east-1): " AWS_REGION
    if [[ -n "$AWS_REGION" ]]; then
        break
    fi
    echo "AWS region cannot be empty. Please try again."
done

# Prompt for AWS account ID
while true; do
    read -p "Enter AWS account ID (12 digits): " AWS_ACCOUNT_ID
    if validate_account_id "$AWS_ACCOUNT_ID"; then
        break
    fi
    echo "Invalid account ID. Must be exactly 12 digits."
done

# Prompt for policy name
while true; do
    read -p "Enter policy name: " POLICY_NAME
    if [[ -n "$POLICY_NAME" ]]; then
        break
    fi
    echo "Policy name cannot be empty. Please try again."
done

# Create role policy with IP and KMS restrictions for specific log group
ROLE_POLICY='{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:'$AWS_REGION':'$AWS_ACCOUNT_ID':log-group:'$LOG_GROUP_NAME':*",
      "Condition": {
        "IpAddress": {
          "aws:SourceIp": "'$ALLOWED_IP'"
        },
        "StringEquals": {
          "logs:kms-key": "'$KMS_KEY_ARN'"
        }
      }
    },
    {
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*",
        "kms:DescribeKey"
      ],
      "Resource": "'$KMS_KEY_ARN'",
      "Condition": {
        "IpAddress": {
          "aws:SourceIp": "'$ALLOWED_IP'"
        }
      }
    }
  ]
}'

# Attach policy to role
aws iam put-role-policy \
  --profile "$PROFILE" \
  --no-cli-pager \
  --color off \
  --role-name "$ROLE_NAME" \
  --policy-name "$POLICY_NAME" \
  --policy-document "$ROLE_POLICY"

echo "CloudWatch logging policy $POLICY_NAME attached to role $ROLE_NAME successfully using profile $PROFILE"

